Дел 1
4. Креираме директориум со mkdir SI_2025_lab1_213152
Влегуваме со cd SI_2025_lab1_213152
Иницијализираме гит со git init

5.Го копираме Remote Repository URL
Го спојуваме репозиториумот со git remote add origin https://github.com/hristijanbogdanoski/SI_2025_lab1_213152.git
Проверка git remote -v

6. Креираме README.md со echo Hristijan Bogdanoski 213152 > README.md
Додаваме на гит git add README.md
git commit -m "Initial commit"
Push на промените git push origin master

7. Го додаваме Јава фајлот на Git
git add SI2025Lab1Main.java
git commit -m "Add starter code"
git push origin master

8. Синхронизација правиме со
git branch
git checkout master
git push origin master

Дел 2
13. Користени се долу наведените команди
git fetch origin
git checkout 1-remove-a-task-by-name
git checkout 3-list-tasks-sorted-by-name
git checkout 7-count-tasks-per-category

14. Користени се долу наведените команди
git checkout 1-remove-a-task-by-name
за проверка - git branch

15. Ги имплементирав методите removeTask, sortTasksByName, and countTasksPerCategory

public void removeTask(String name) {
        tasks.removeIf(task -> task.getName().equalsIgnoreCase(name));
    }

16. git add .
git commit
git push origin 1-remove-a-task-by-name

17. Проверуваме дали сме на точната гранка со git checkout 1-remove-a-task-by-name
Креираме Pull git pull origin 1-remove-a-task-by-name
Правиме Push git push origin 1-remove-a-task-by-name

18. Направивме Pull Request така што влеговме во GitHub Repository отворивме Pull Requests Tab и со клик на
New Pull Request ги споредивме гранките со мастерот. Потоа ја синхронизиравме локалната гранка со 
git checkout master
git pull origin master

19. Имплементација на функцијата
public void sortTasksByName() {
    tasks.sort(Comparator.comparing(Task::getName));
}

git checkout 3-list-tasks-sorted-by-name
git add .
git commit -m "Implemented sortTasksByName"
git push origin 3-list-tasks-sorted-by-name
New pull request на GitHub Create pull request


Имплементација на функцијата

    public Map<String, Integer> countTasksPerCategory() {
        Map<String, Integer> categoryCounts = new HashMap<>();
        for (Task task : tasks) {
            categoryCounts.put(task.getCategory(), categoryCounts.getOrDefault(task.getCategory(), 0) + 1);
        }
        return categoryCounts;
    }

git add .
git commit -m "Implemented countTasksPerCategory"
git push origin 7-count-tasks-per-category

20. При спојувањето на гранките во чекорите 20 и 22, не се појавија конфликти.
Спојување на гранките:
За спојувањето на гранките беше употребена стандардната стратегија за Merge.
Немаше конфликти при извршувањето на наредбата и Git автоматски ги комбинираше промените од двете гранки без потреба од рачно решавање на конфликти.
Стратегија за спојување:
Користев стандардната стратегија Merge, која автоматски ги комбинираше промените без конфликти.
Сето тоа беше успешно завршено и одобрено.


22. git checkout master
git pull origin master
git merge 7-count-tasks-per-category
git push origin master

25. git log --oneline --graph --all
git log --oneline --graph --all > logs.txt
git add logs.txt 213152.txt
git commit -m "Final commit"





